from multiprocessing import Process, Manager
from instruments.alazar import ATS9870_NPT as npt
import matplotlib.pyplot as plt
import numpy as np
import sys
sys.path.append("../../")
from lib import data_process as dp
import yaml




def live_plot(params, num_patterns,que,data_queue):
    (chA_avgs_nosub, chA_avgs_sub, chB_avgs_nosub, chB_avgs_sub, readout_avg_array_A, readout_avg_array_B,index_number,pattern_number) = data_queue.get()
    if params['measurement'] == 'readout' or params['measurement'] == 'npp':
        time_step = 1
    else:
        time_step = params[params['measurement']]['step']
    x = [i*time_step for i in range(num_patterns)]
    plt_avg_sub = np.zeros((2,num_patterns))
    plt_avg_nosub = np.zeros((2,num_patterns))
    #setting up the plots and histograms
    plt.ion()
    fig, ax_array = plt.subplots(2,3)
    line0, = ax_array[0,0].plot(x, plt_avg_sub[0],label='chA_sub_avg')
    line1, = ax_array[1,0].plot(x, plt_avg_nosub[0],label='chA_nosub_avg') # Returns a tuple of line objects, thus the comma
    line2, = ax_array[0,1].plot(x, plt_avg_sub[1],label='chbB_sub_avg')
    line3, = ax_array[1,1].plot(x, plt_avg_nosub[1],label='chB_nosub_avg')
    #line4 = ax_array[0,2].scatter(plt_avg_nosub[0], plt_avg_nosub[1],s=1)
    #line5 = ax_array[1,2].scatter(plt_avg_sub[0], plt_avg_sub[1],s=1)
    ax_array[0,0].set_title('chA_sub_avg')
    ax_array[1,0].set_title('chA_nosub_avg')
    ax_array[0,1].set_title('chbB_sub_avg')
    ax_array[1,1].set_title('chB_nosub_avg')
    ax_array[0,2].set_title('I vs Q nosub')
    ax_array[1,2].set_title('I vs Q sub')
    scatter_nosub_x = []
    scatter_nosub_y = []
    scatter_sub_x = []
    scatter_sub_y = []
    plot_decimation = params['Plot_Decimation']
    if live_plot and pattern_number == 0 and index_number > 0 and index_number % plot_decimation == 0:
        for i in range(num_patterns):
            #averaging the data ans saving it for the live plots
            plt_avg_sub[0,i] = np.average(chA_avgs_sub[i][:index_number])
            plt_avg_nosub[0,i] = np.average(chA_avgs_nosub[i][:index_number])
            plt_avg_sub[1,i] = np.average(chB_avgs_sub[i][:index_number])
            plt_avg_nosub[1,i] = np.average(chB_avgs_nosub[i][:index_number])

        scatter_nosub_x = np.append(scatter_nosub_x,chA_avgs_nosub)
        scatter_nosub_y = np.append(scatter_nosub_y,chB_avgs_nosub)
        #scatter_sub_x = np.append(scatter_sub_x,chA_avgs_sub)
        #scatter_sub_y = np.append(scatter_sub_y,chB_avgs_sub)

        #setting axis limits for the lines
        ax_array[0,0].set_ylim(np.min(plt_avg_sub[0]), np.max(plt_avg_sub[0]))
        ax_array[1,0].set_ylim(np.min(plt_avg_nosub[0]), np.max(plt_avg_nosub[0]))
        ax_array[0,1].set_ylim(np.min(plt_avg_sub[1]), np.max(plt_avg_sub[1]))
        ax_array[1,1].set_ylim(np.min(plt_avg_nosub[1]), np.max(plt_avg_nosub[1]))
        
        if index_number > 1:
            #setting axis limits for the scatter
            '''def margin(data):
                return abs(np.max(data)-min(data))*0.05
            ax_array[0,2].set_xlim(np.min(scatter_nosub_x)-margin(scatter_nosub_x), np.max(scatter_nosub_x)+margin(scatter_nosub_x))
            ax_array[0,2].set_ylim(np.min(scatter_nosub_y)-margin(scatter_nosub_y), np.max(scatter_nosub_y)+margin(scatter_nosub_y))
            ax_array[1,2].set_xlim(np.min(scatter_sub_x)-margin(scatter_sub_x), np.max(scatter_sub_x)+margin(scatter_sub_x))
            ax_array[1,2].set_ylim(np.min(scatter_sub_y)-margin(scatter_sub_y), np.max(scatter_sub_y)+margin(scatter_sub_y))'''
        #updating the plot
        line0.set_ydata(plt_avg_sub[0])
        line1.set_ydata(plt_avg_nosub[0])
        line2.set_ydata(plt_avg_sub[1])
        line3.set_ydata(plt_avg_nosub[1])

        dp.plot_iq(ax_array[0,2],scatter_nosub_x,scatter_nosub_y,'nosub')
        #dp.plot_iq(ax_array[1,2],scatter_sub_x,scatter_sub_y,'sub')
        #line4.set_offsets(np.column_stack((scatter_nosub_x, scatter_nosub_y)))
        #line5.set_offsets(np.column_stack((scatter_sub_x, scatter_sub_y)))

        fig.canvas.draw()
        fig.canvas.flush_events()
        plt.suptitle("rep # {}  out of {}".format(str(index_number),str(1000)))
